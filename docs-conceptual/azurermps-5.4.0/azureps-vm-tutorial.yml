### YamlMime:Tutorial
title: "Azure PowerShell で仮想マシンを作成する"
metadata:
  title: "Azure PowerShell で仮想マシンを作成する"
  description: "仮想マシンを作成して Azure PowerShell を開始します。"
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: azurepowershell
  ms.date: 02/08/2018
  ms.author: sewhee
  author: sdwheeler
  manager: carmonm
  ms.devlang: azure-powershell
  ms.technology: azure
  ms.openlocfilehash: bb5024927da7888dca406a522fa39dfe225afb89
  ms.sourcegitcommit: 3842efd1eb2d16f7c6d9ae87d6d7916b770658c1
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 03/05/2018
items:
- durationInMinutes: 1
  content: "このチュートリアルでは、Azure PowerShell を使用した仮想マシンの設定に関連するすべての手順について学習します。 チュートリアルでは、出力クエリ、Azure リソースの再利用、およびリソースのクリーンアップについても説明します。\n\nこれは、Azure Cloud Shell によって提供される対話型チュートリアルです。また、ローカルに [Azure PowerShell をインストール](install-azurerm-ps.md)することもできます。\n\nチュートリアルのテキストを Azure Cloud Shell に貼り付けるには、__Ctrl + Shift + V__ キー (macOS の場合は __cmd-v shift__) を使用します。"
- durationInMinutes: 1
  title: "ログイン"
  content: "Azure PowerShell のローカル インストールを使用している場合は、最初にログインしてから、他の手順を実行します。\n\n```powershell\nLogin-AzureRmAccount\n```\n\nご使用の端末に表示される手順に従って、ログイン プロセスを完了してください。"
- durationInMinutes: 1
  title: "リソース グループの作成"
  content: "Azure では、すべてのリソースがリソース管理グループに割り当てられます。 リソース グループではリソースを論理グループに分類できるため、コレクションとして操作しやすくなります。\nこのチュートリアルでは、作成されたすべてのリソースが、`TutorialResources` という名前の 1 つのグループに割り当てられます。\n\n```powershell\nNew-AzureRmResourceGroup -Name TutorialResources -Location eastus\n```\n\n```Output\nResourceGroupName : TutorialResources\nLocation          : eastus\nProvisioningState : Succeeded\nTags              :\nResourceId        : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources\n```"
- durationInMinutes: 1
  title: "VM の管理者資格情報の作成"
  content: "新しい仮想マシンを作成する前に、Windows VM の管理者アカウントのユーザー名とパスワードを含む資格情報オブジェクトを作成する必要があります。\n\n```powershell\n$cred = Get-Credential -Message \"Enter a username and password for the virtual machine.\"\n```\n\nメッセージが表示されたら、ユーザー名とパスワードを入力します。 結果として得られる資格情報オブジェクトは、次の手順でパラメーターとして渡されます。\n\n```Output\nWindows PowerShell credential request.\nEnter a username and password for the virtual machine.\nUser: tutorAdmin\nPassword for user tutorAdmin: *********\n```"
- durationInMinutes: 4
  title: "仮想マシンの作成"
  content: "Azure の仮想マシンには依存関係が多数含まれます。 Azure PowerShell では、指定したコマンドライン引数に基づいてこのようなリソースが自動的に作成されます。 読みやすくするために、[PowerShell スプラッティング](/powershell/module/microsoft.powershell.core/about/about_splatting)を使用して Azure PowerShell コマンドレットにパラメーターを渡します。\n\nWindows を実行する新しい仮想マシンを作成します。\n\n```powershell\n$vmParams = @{\n  ResourceGroupName = 'TutorialResources'\n  Name = 'TutorialVM1'\n  Location = 'eastus'\n  ImageName = 'Win2016Datacenter'\n  PublicIpAddressName = 'tutorialPublicIp'\n  Credential = $cred\n  OpenPorts = 3389\n}\n$newVM1 = New-AzureRmVM @vmParams\n```\nVM が作成されるとき、使用されているパラメーター値と、作成中の Azure リソースが表示されます。\nPowerShell では、次のように進行状況バーが置き換えられます。\n\n```Output\n Creating Azure resources\n  39% \\\n  [ooooooooooooooooooooooooooooooooooo                                                                 ]\n\n  Creating TutorialVM1 virtual machine.\n```\n\nVM の準備ができたら、Azure Portal で、または \\$newVM1 変数を調べることによって、結果を表示できます。\n\n```powershell\n$newVM1\n```\n\n```Output\nResourceGroupName : TutorialResources\nId                : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM1\nVmId              : 12345678-9abc-def0-1234-56789abcedf0\nName              : TutorialVM1\nType              : Microsoft.Compute/virtualMachines\nLocation          : eastus\nTags              : {}\nHardwareProfile   : {VmSize}\nNetworkProfile    : {NetworkInterfaces}\nOSProfile         : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}\nProvisioningState : Succeeded\nStorageProfile    : {ImageReference, OsDisk, DataDisks}\n```\n\n中かっこ内に表示されているプロパティ値は、入れ子になったオブジェクトです。 次の手順で、これらの入れ子になったオブジェクトの特定の値を表示する方法を説明します。"
- durationInMinutes: 5
  title: "クエリでの VM 情報の取得"
  content: "先ほど作成した VM から、より詳細な情報をいくつか取得してみましょう。 この例では、VM の名前と、作成した管理者アカウントを確認します。\n\n```powershell\n$newVM1.OSProfile | Select-Object ComputerName,AdminUserName\n```\n\n```Output\nComputerName AdminUsername\n------------ -------------\nTutorialVM1  tutorialAdmin\n```\n\n他の Azure PowerShell コマンドを使用して、ネットワーク構成に関する個別の情報を取得することができます。\n\n```powershell\n$newVM1 | Get-AzureRmNetworkInterface |\n  Select-Object -ExpandProperty IpConfigurations |\n    Select-Object Name,PrivateIpAddress\n```\n\nこの例では、PowerShell のパイプラインを使用して、\\$newVM1 オブジェクトを `Get-AzureRmNetworkInterface` コマンドレットに送信しています。 結果として得られるネットワーク インターフェイス オブジェクトから、入れ子になった IpConfigurations オブジェクトを選択しています。 IpConfigurations オブジェクトから Name プロパティと PrivateIpAddress プロパティを選択しています。\n\n```Output\nName        PrivateIpAddress\n----        ----------------\nTutorialVM1 192.168.1.4\n```\n\nVM が実行されていることを確認するには、リモート デスクトップ経由で接続する必要があります。 そのために、パブリック IP アドレスを知っている必要があります。\n\n```powershell\n$publicIp = Get-AzureRmPublicIpAddress -Name tutorialPublicIp -ResourceGroupName TutorialResources\n\n$publicIp | Select-Object Name,IpAddress,@{label='FQDN';expression={$_.DnsSettings.Fqdn}}\n```\n\nこの例では、`Get-AzureRmPublicIpAddress` を使用して、\\$publicIp 変数に結果を格納しています。 この変数からプロパティを選択し、式を使用して、入れ子になった Fqdn プロパティを取得しています。\n\n```Output\nName             IpAddress           FQDN\n----             ---------           ----\ntutorialPublicIp <PUBLIC_IP_ADDRESS> tutorialvm1-8a0999.eastus.cloudapp.azure.com\n```\n\nローカル コンピューターからリモート デスクトップ経由で次のコマンドを実行して、VM に接続できます。\n\n```powershell\nmstsc.exe /v <PUBLIC_IP_ADDRESS>\n```\n\nオブジェクトのプロパティに対するクエリ実行の詳細については、「[Azure リソースに対するクエリ](./queries-azureps.md)」を参照してください。"
- durationInMinutes: 4
  title: "既存のサブネットでの新しい VM の作成"
  content: "2 番目の VM では既存のサブネットを使用します。\n\n```powershell\n$vm2Params = @{\n  ResourceGroupName = 'TutorialResources'\n  Name = 'TutorialVM2'\n  ImageName = 'Win2016Datacenter'\n  VirtualNetworkName = 'TutorialVM1'\n  SubnetName = 'TutorialVM1'\n  PublicIpAddressName = 'tutorialPublicIp2'\n  Credential = $cred\n  OpenPorts = 3389\n}\n$newVM2 = New-AzureRmVM @vm2Params\n\n$newVM2\n```\n\n```Output\nResourceGroupName        : TutorialResources\nId                       : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM2\nVmId                     : 12345678-9abc-def0-1234-56789abcedf1\nName                     : TutorialVM2\nType                     : Microsoft.Compute/virtualMachines\nLocation                 : eastus\nTags                     : {}\nHardwareProfile          : {VmSize}\nNetworkProfile           : {NetworkInterfaces}\nOSProfile                : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}\nProvisioningState        : Succeeded\nStorageProfile           : {ImageReference, OsDisk, DataDisks}\nFullyQualifiedDomainName : tutorialvm2-dfa5af.eastus.cloudapp.azure.com\n```\n\n新しい VM のパブリック IP アドレスは、\\$newVM2 オブジェクトの FullyQualifiedDomainName プロパティで返されるので、取得するいくつかの手順をスキップできます。 リモート デスクトップで次のコマンドを使用して接続します。\n\n```powershell\nmstsc.exe /v $newVM2.FullyQualifiedDomainName\n```"
- durationInMinutes: 4
  title: "クリーンアップ"
  content: "これでチュートリアルは終了です。次は、作成したリソースをクリーンアップします。 `Remove-AzureRmResource` コマンドを使用すると個別のリソースを削除できますが、リソース グループ内のすべてのリソースを削除する最も安全な方法は、`Remove-AzureRmResourceGroup` コマンドを使用してグループを削除することです。\n\n```powershell\n$job = Remove-AzureRmResourceGroup -Name TutorialResources -Force -AsJob\n\n$job\n```\n\n```Output\nId     Name            PSJobTypeName   State         HasMoreData     Location             Command\n--     ----            -------------   -----         -----------     --------             -------\n1      Long Running... AzureLongRun... Running       True            localhost            Remove-AzureRmResource...\n```\n\nこのコマンドは、チュートリアルで作成したリソースを削除し、必ず正しい順序でその割り当てを解除します。 `-AsJob` パラメーターは、削除の実行中に PowerShell がブロックされないようにします。 削除が完了するまで待機するには、次のコマンドを使用します。\n\n```powershell\nWait-Job -Id $job.Id\n```\n\nクリーンアップが完了したら、チュートリアルは終了です。 引き続き、ここで学習した内容を簡単に確認し、次のステップで役立つリソースへのリンクを紹介します。"
- durationInMinutes: 1
  title: "まとめ"
  content: "\nお疲れさまでした。 ここでは、新規または既存のリソースを使用して VM を作成する方法を学習し、式とその他の Azure PowerShell コマンドを使用してデータを取得してシェル変数に格納しました。また、Azure VM 用に作成されたリソースをいくつか確認しました。\n\n次の作業は、Azure PowerShell の使用方法によって異なります。 このチュートリアルで説明した機能の詳細を説明した資料には、さまざまなものがあります。\n\n### <a name=\"in-depth-azure-powershell-documentation\"></a>詳細な Azure PowerShell のドキュメント\n\n時間をとって、一連の完全な [Azure PowerShell のドキュメント](overview.md)を確認できます。\n\nこのチュートリアルで使用されているコマンドの詳細については、次の記事をご覧ください。\n\n- [New-AzureRmResourceGroup](/powershell/module/azurerm.resources/new-azurermresourcegroup)\n- [Get-Credential](/powershell/module/microsoft.powershell.security/get-credential)\n- [New-AzureRmVM](/powershell/module/azurerm.compute/new-azurermvm)\n- [Select-Object](/powershell/module/microsoft.powershell.utility/select-object)\n- [Get-AzureRmPublicIpAddress](/powershell/module/azurerm.network/get-AzureRmPublicIpAddress)\n- [Remove-AzureRmResourceGroup](/powershell/module/azurerm.resources/Remove-AzureRmResourceGroup)\n- [Wait-Job](/powershell/module/microsoft.powershell.core/wait-job)\n\n次の記事では、このチュートリアルで示した機能について詳しく説明します。\n\n- [PowerShell スプラッティング](/powershell/module/microsoft.powershell.core/about/about_splatting)\n- [クエリ](queries-azureps.md)\n- [書式設定](formatting-output.md)\n- [PowerShell ジョブの使用](using-psjobs.md)\n\n### <a name=\"sample-scripts\"></a>サンプルのスクリプト\n\n特定のタスクをすぐに開始する必要がある場合は、サンプル スクリプトを確認してください。\n\n- [Linux 仮想マシン](/azure/virtual-machines/linux/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Windows 仮想マシン](/azure/virtual-machines/windows/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Web Apps](/azure/app-service-web/app-service-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [SQL Database](/azure/sql-database/sql-database-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Cosmos DB](/azure/cosmos-db/powershell-samples?toc=%2fpowershell%2fmodules%2ftoc.json)\n\n### <a name=\"feedback\"></a>フィードバック\n\nフィードバック、ご提案、ご質問はさまざまな方法で送信できます。\n\n* `Send-Feedback` は Azure PowerShell の組み込みコマンドで、自由形式のフィードバックをチームに提供できます。\n* [Azure PowerShell リポジトリ](https://github.com/Azure/azure-powershell/issues)で、機能要求またはバグ レポートを提出できます。\n* [Azure PowerShell ドキュメント リポジトリ](https://github.com/Azure/azure-docs-powershell/issues)で問題を報告することで、ご質問や内容確認を行うことができます。\n\nAzure PowerShell をご利用いただけましたら幸いです。"
